/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.app.coffee.Login.Register;

import com.app.coffee.Backend.DAO.UserDAO;
import com.app.coffee.Backend.Model.UsersModel;
import com.app.coffee.bill.*;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.AncestorEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author anhso
 */
public class ListUsers extends javax.swing.JPanel {

    /**
     * Creates new form test
     */
    public ListUsers() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableListUser = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        EditButton = new javax.swing.JButton();
        CreateButton = new javax.swing.JButton();
        GetList = new javax.swing.JButton();
        GetList1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(243, 114, 44)));
        setPreferredSize(new java.awt.Dimension(1340, 750));

        TableListUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(243, 114, 44)));
        TableListUser.setForeground(new java.awt.Color(243, 114, 44));
        TableListUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID ", "User name", "Gender", "Phone", "Image", "Email", "Option", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableListUser.setToolTipText("");
        TableListUser.setGridColor(new java.awt.Color(243, 114, 44));
        TableListUser.setShowGrid(true);
        TableListUser.getTableHeader().setReorderingAllowed(false);
        TableListUser.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                ListUsers(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        TableListUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableClickMouse(evt);
            }
        });
        jScrollPane1.setViewportView(TableListUser);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(243, 114, 44), 2));
        jPanel1.setForeground(new java.awt.Color(243, 114, 44));

        EditButton.setBackground(new java.awt.Color(243, 114, 44));
        EditButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        EditButton.setForeground(new java.awt.Color(255, 255, 255));
        EditButton.setText("Edit User");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        CreateButton.setBackground(new java.awt.Color(243, 114, 44));
        CreateButton.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        CreateButton.setForeground(new java.awt.Color(255, 255, 255));
        CreateButton.setText("Create User");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnClickCreateButton(evt);
            }
        });

        GetList.setBackground(new java.awt.Color(243, 114, 44));
        GetList.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        GetList.setForeground(new java.awt.Color(255, 255, 255));
        GetList.setText("Delete");
        GetList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteteButton(evt);
            }
        });

        GetList1.setBackground(new java.awt.Color(243, 114, 44));
        GetList1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        GetList1.setForeground(new java.awt.Color(255, 255, 255));
        GetList1.setText("Refresh List");
        GetList1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetList1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(CreateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(GetList1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(GetList, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CreateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(GetList, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(GetList1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1326, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
    JFrame frame = new JFrame("Create User");
         
        EditUserForm ed = new EditUserForm();    
        frame.getContentPane().add(ed);
        frame.pack();
        frame.setVisible(true); 
    }//GEN-LAST:event_EditButtonActionPerformed

    
    
    private void OnClickCreateButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnClickCreateButton
       JFrame frame = new JFrame("Create User");
         
        RegisterForm registerForm = new RegisterForm();    
        frame.getContentPane().add(registerForm);
        frame.pack();
        frame.setVisible(true); 
    }//GEN-LAST:event_OnClickCreateButton

    private void ListUsers(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_ListUsers
        // TODO add your handling code here:
        
        
    
    }//GEN-LAST:event_ListUsers

    private void DeleteteButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteteButton
     int[] selectedRows = TableListUser.getSelectedRows();
    if (selectedRows.length == 0) {
        JOptionPane.showMessageDialog(this, "Please select at least one user to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected users?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        UserDAO userDAO = new UserDAO();
        for (int row : selectedRows) {
            // Kiểm tra trạng thái checkbox "Status"
            Boolean isSelected = (Boolean) TableListUser.getValueAt(row, TableListUser.getColumnModel().getColumnIndex("Status"));
            if (isSelected != null && isSelected.booleanValue()) {
                int userId = (int) TableListUser.getValueAt(row, 0); // Assuming ID is in the first column
                UsersModel userToDelete = new UsersModel();
                userToDelete.setId(userId);
                int result = userDAO.Delete(userToDelete);
                if (result <= 0) {
                    JOptionPane.showMessageDialog(this, "Error deleting user with ID: " + userId, "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                // Nếu checkbox "Status" không được chọn hoặc là null, không thực hiện xóa
                JOptionPane.showMessageDialog(this, "Please select users with 'Status' checked to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        GetList1ActionPerformed(null); // Refresh the list after deletion
    }
    }//GEN-LAST:event_DeleteteButton

    private void GetList1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetList1ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        UserDAO userdao = new UserDAO();
        ArrayList<UsersModel> listUser = userdao.selectAll();
        DefaultTableModel table =  (DefaultTableModel) TableListUser.getModel();
        table.setRowCount(0);
        for (UsersModel user : listUser) {
            Object[] row = {
                user.getId(),
            user.getUserName() != null ? user.getUserName() : "",
            user.getGender() != null ? user.getGender() : "" ,
            user.getPhone() != 0 ? String.valueOf(user.getPhone()) : "",
            user.getImage() != null ? user.getImage() : "",
            user.getEmail() != null ? user.getEmail() : "",
            user.getOption() != null ? user.getOption() : ""
            };
            table.addRow(row); 
        }
    }//GEN-LAST:event_GetList1ActionPerformed

    private void TableClickMouse(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableClickMouse
        // TODO add your handling code here:
        int row = TableListUser.rowAtPoint(evt.getPoint());
        int col = TableListUser.columnAtPoint(evt.getPoint());

        if (col == TableListUser.getColumnModel().getColumnIndex("Status")) {
            Boolean isSelected = (Boolean) TableListUser.getValueAt(row, col);
            TableListUser.setValueAt(!isSelected, row, col);
        }
        
    }//GEN-LAST:event_TableClickMouse


//    private void refreshUserTable() {
//    UserDAO userdao = new UserDAO();
//    ArrayList<UsersModel> listUser = userdao.selectAll();
//    DefaultTableModel tableModel = (DefaultTableModel) TableListUser.getModel();
//    tableModel.setRowCount(0); // Clear existing rows
//
//    for (UsersModel user : listUser) {
//        Object[] row = {
//            user.getId(),
//            user.getUserName() != null ? user.getUserName() : "",
//            user.getGender() != null ? user.getGender() : "",
//            user.getPhone() != 0 ? String.valueOf(user.getPhone()) : "",
//            user.getImage() != null ? user.getImage() : "",
//            user.getEmail() != null ? user.getEmail() : "",
//            user.getOption() != null ? user.getOption() : "",
//            user.getStatus() != null ? user.getStatus() : Boolean.FALSE
//        };
//        tableModel.addRow(row);
//    }
//}
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JButton GetList;
    private javax.swing.JButton GetList1;
    private javax.swing.JTable TableListUser;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
