/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.app.coffee.Login.Register;

import com.app.coffee.Backend.DAO.UserDAO;
import com.app.coffee.Backend.Model.UsersModel;
import com.app.coffee.Login.CustomDialog;
import com.app.coffee.bill.*;
import java.awt.Font;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.AncestorEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author anhso
 */
public class ListUsers extends javax.swing.JPanel {
    private int currentUserId;
    private boolean isInfoDisplayed = false;
    /**
     * Creates new form test
     */
    public ListUsers() {
        initComponents();
        RefreshList();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        EditButton = new javax.swing.JButton();
        GetList = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableListUser = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        userNameField = new javax.swing.JTextField();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        label7 = new java.awt.Label();
        ImageField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        phoneField = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        label8 = new java.awt.Label();
        Confirm = new javax.swing.JPasswordField();
        passwordField = new javax.swing.JPasswordField();
        CreateButton = new javax.swing.JButton();
        addRegister = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(243, 114, 44)));
        setPreferredSize(new java.awt.Dimension(1340, 750));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(243, 114, 44), 2));
        jPanel1.setForeground(new java.awt.Color(243, 114, 44));

        EditButton.setBackground(new java.awt.Color(243, 114, 44));
        EditButton.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        EditButton.setForeground(new java.awt.Color(255, 255, 255));
        EditButton.setLabel("Show Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        GetList.setBackground(new java.awt.Color(243, 114, 44));
        GetList.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        GetList.setForeground(new java.awt.Color(255, 255, 255));
        GetList.setText("Delete");
        GetList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteteButton(evt);
            }
        });

        TableListUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(243, 114, 44)));
        TableListUser.setForeground(new java.awt.Color(243, 114, 44));
        TableListUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID ", "User name", "Gender", "Phone", "Image", "Email", "Option", "Edit/Delete"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableListUser.setToolTipText("");
        TableListUser.setGridColor(new java.awt.Color(243, 114, 44));
        TableListUser.setShowGrid(true);
        TableListUser.getTableHeader().setReorderingAllowed(false);
        TableListUser.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                ListUsers(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        TableListUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableClickMouse(evt);
            }
        });
        jScrollPane1.setViewportView(TableListUser);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(GetList)
                .addGap(20, 20, 20))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 886, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GetList, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        label1.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        label1.setForeground(new java.awt.Color(243, 114, 44));
        label1.setText("User Name: ");

        userNameField.setToolTipText("");
        userNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameFieldActionPerformed(evt);
            }
        });

        label2.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        label2.setForeground(new java.awt.Color(243, 114, 44));
        label2.setText("Gender:");

        label3.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        label3.setForeground(new java.awt.Color(243, 114, 44));
        label3.setText("Phone:");

        label4.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        label4.setForeground(new java.awt.Color(243, 114, 44));
        label4.setText("Image:");

        label5.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        label5.setForeground(new java.awt.Color(243, 114, 44));
        label5.setText("Email:");

        label6.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        label6.setForeground(new java.awt.Color(243, 114, 44));
        label6.setText("Password:");

        label7.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        label7.setForeground(new java.awt.Color(243, 114, 44));
        label7.setText("Option");

        emailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailFieldActionPerformed(evt);
            }
        });

        jComboBox1.setBackground(new java.awt.Color(243, 114, 44));
        jComboBox1.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "male", "Female" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setBackground(new java.awt.Color(243, 114, 44));
        jComboBox2.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jComboBox2.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sales agent" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(243, 114, 44));
        jLabel1.setText("User");

        label8.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        label8.setForeground(new java.awt.Color(243, 114, 44));
        label8.setText("Confirm Password:");

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(162, 162, 162))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(11, 11, 11))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ImageField, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                            .addComponent(emailField, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                            .addComponent(phoneField, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordField)
                            .addComponent(Confirm)))
                    .addComponent(label2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userNameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ImageField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(label8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Confirm, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58))
        );

        CreateButton.setBackground(new java.awt.Color(243, 114, 44));
        CreateButton.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        CreateButton.setForeground(new java.awt.Color(255, 255, 255));
        CreateButton.setText("Create User");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnClickCreateButton(evt);
            }
        });

        addRegister.setBackground(new java.awt.Color(243, 114, 44));
        addRegister.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        addRegister.setForeground(new java.awt.Color(255, 255, 255));
        addRegister.setLabel("Edit");
        addRegister.setMaximumSize(new java.awt.Dimension(99, 32));
        addRegister.setMinimumSize(new java.awt.Dimension(99, 32));
        addRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Editbutton(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 886, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
    
    int selectedRow = TableListUser.getSelectedRow();
    if (selectedRow == -1) {
        CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Please select a user to edit.");
        return;
    }
    int userId = (int) TableListUser.getValueAt(selectedRow, 0);
    UserDAO userDAO = new UserDAO();
    UsersModel user = userDAO.selectById(userId);

    if (user == null) {
        JOptionPane.showMessageDialog(this, "User not found with ID: " + userId, "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    userNameField.setText(user.getUserName());
    jComboBox1.setSelectedItem(user.getGender());
    phoneField.setText(String.valueOf(user.getPhone()));
    ImageField.setText(user.getImage());
    emailField.setText(user.getEmail());
    jComboBox2.setSelectedItem(user.getOption());
    currentUserId = userId;
    isInfoDisplayed = true;
    }//GEN-LAST:event_EditButtonActionPerformed
   
    private void OnClickCreateButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnClickCreateButton
        String userName = userNameField.getText().trim();
        String gender = (String) jComboBox1.getSelectedItem();
        String image = ImageField.getText().trim();
        String email = emailField.getText().trim();
        String password = new String(passwordField.getPassword()).trim();
        String confirmPassword = new String(Confirm.getPassword()).trim();
        String option = (String) jComboBox2.getSelectedItem();
        int Gender = -1;
        int phone;

        if (userName.isEmpty()) {
            CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "User_Name can't be empty!!");
            return;
        }
        try {
            String phoneText = phoneField.getText().trim();        
            phone = Integer.parseInt(phoneField.getText().trim());
        } catch (NumberFormatException e) {
            CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Invalid phone number. Please enter a valid number");
            return;
        }

        if (email.isEmpty()) {
            CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Email can't be empty!!");
            return;
        }

        Pattern emailPattern = Pattern.compile("^[\\w\\.-]+@[\\w\\.-]+\\.[a-zA-Z]{2,}$");
        Matcher emailMatcher = emailPattern.matcher(email);
        if (!emailMatcher.matches()) {
            CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Email Invalid!!");
            return;
        }

        if (password.isEmpty()) {
            CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Password can't be empty!!");
            return;
        }

        if (!password.equals(confirmPassword)) {
            CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Passwords do not match!!");
            return;
        }
        UserDAO userDAO1 = new UserDAO();
        if (userDAO1.checkEmailExists(email)) {
        CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Email already exists. Please use a different email.");
        return;
    }
        boolean status = false;
        UsersModel newUser = new UsersModel(0, userName, gender, phone, image, email, password, option, status);

        UserDAO userDao = UserDAO.getInstance();
        int result = userDao.Create(newUser);

        if (result > 0) {

            CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Success", "Create user successfully!");
            userNameField.setText("");
            jComboBox1.setSelectedIndex(0);
            ImageField.setText("");
            phoneField.setText("");
            emailField.setText("");
            passwordField.setText("");
            Confirm.setText("");
            jComboBox2.setSelectedIndex(0);
            RefreshList();
        } else {
            JOptionPane.showMessageDialog(this, "Error Create user!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_OnClickCreateButton

    private void ListUsers(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_ListUsers
        // TODO add your handling code here:
        
        
    
    }//GEN-LAST:event_ListUsers

    private void DeleteteButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteteButton
    int[] selectedRows = TableListUser.getSelectedRows();
    if (selectedRows.length == 0) {
        
        CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Please select at least one user to delete.");
        return;
    }
    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected users?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        UserDAO userDAO = new UserDAO();
        for (int row : selectedRows) {
            Boolean isSelected = (Boolean) TableListUser.getValueAt(row, TableListUser.getColumnModel().getColumnIndex("Edit/Delete"));
            if (isSelected != null && isSelected) { 
                int userId = (int) TableListUser.getValueAt(row, 0); 
                int result = userDAO.DeleteByStatus(userId);
                if (result <= 0) {
                    JOptionPane.showMessageDialog(this, "Error deleting user with ID: " + userId, "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please select users with 'Status' checked to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        GetList();
    }
    }//GEN-LAST:event_DeleteteButton

    private void TableClickMouse(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableClickMouse

        
    }//GEN-LAST:event_TableClickMouse

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void emailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailFieldActionPerformed

    private void userNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameFieldActionPerformed

    private void Editbutton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Editbutton
    int selectedRow = TableListUser.getSelectedRow();
    if (selectedRow == -1) {
        CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Please click check-box show edit!!! ");
        return;
    }
    if (!isInfoDisplayed) {
        CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Erorr", "Please click button Show Edit");
        return;
    }
        
    String userName = userNameField.getText().trim();
    String gender = (String) jComboBox1.getSelectedItem();
    
    String image = ImageField.getText().trim();
    String email = emailField.getText().trim();
    String password = new String(passwordField.getPassword()).trim();
    String confirmPassword = new String(Confirm.getPassword()).trim();
    String option = (String) jComboBox2.getSelectedItem();

    int phone;
        
        if (userName.isEmpty()) {
             CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "User_Name can't be empty!!");
            return;
        }
             
        try {
            
            String phoneText = phoneField.getText().trim();
            
            if (phoneText.length() != 10) {
                CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Please enter a phone number with exactly 10 characters!");
                return; 
            }
            phone = Integer.parseInt(phoneField.getText().trim());
            
        } catch (NumberFormatException e) {

            CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Invalid phone number. Please enter a valid number");
            return; 
        }
        

        if (email.isEmpty()) {
            CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Email can't be empty!!");
            return;
        }

        Pattern emailPattern = Pattern.compile("^[\\w\\.-]+@[\\w\\.-]+\\.[a-zA-Z]{2,}$");
        Matcher emailMatcher = emailPattern.matcher(email);
        if (!emailMatcher.matches()) {
            CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Email Invalid!!");
            return;
        }

        if (password.isEmpty()) {
            CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Password can't be empty!!");
            return;
        }
        
        if (!password.equals(confirmPassword)) {
        CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Error", "Passwords do not match!!");
        return;
        }
    UserDAO userDAO = new UserDAO();

    UsersModel updatedUser = new UsersModel();
    updatedUser.setId(currentUserId); 
    updatedUser.setUserName(userName);
    updatedUser.setGender(gender);
    updatedUser.setPhone(phone);
    updatedUser.setImage(image);
    updatedUser.setEmail(email);
    updatedUser.setPassWord(password);
    updatedUser.setOption(option);

    int result = userDAO.Update(updatedUser);
    if (result > 0) {
        CustomDialog dialog = new CustomDialog((JFrame) SwingUtilities.getWindowAncestor(this), "Success", "User editor successfully!");
           
            userNameField.setText("");
            jComboBox1.setSelectedIndex(0); 
            ImageField.setText("");
            phoneField.setText("");
            emailField.setText("");
            passwordField.setText("");
            Confirm.setText("");
            jComboBox2.setSelectedIndex(0);
            RefreshList();
            isInfoDisplayed = true;
    } else {
        JOptionPane.showMessageDialog(null, "Failed to update user!", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_Editbutton
    
    public void GetList() {
    UserDAO userdao = new UserDAO();
        ArrayList<UsersModel> listUser = userdao.selectAll();
        DefaultTableModel table =  (DefaultTableModel) TableListUser.getModel();
        table.setRowCount(0);
        for (UsersModel user : listUser) {
            Object[] row = {
                user.getId(),

                user.getUserName() != null ? user.getUserName() : "",
                user.getGender() != null ? user.getGender() : "" ,
                user.getPhone() != 0 ? String.valueOf(user.getPhone()) : "",
                user.getImage() != null ? user.getImage() : "",
                user.getEmail() != null ? user.getEmail() : "",
                user.getOption() != null ? user.getOption() : ""
            };
            table.addRow(row);
        }
    }
    
    public void RefreshList() {
        UserDAO userdao = new UserDAO();
        ArrayList<UsersModel> listUser = userdao.selectAll();
        DefaultTableModel table = (DefaultTableModel) TableListUser.getModel();
        table.setRowCount(0); 
        for (UsersModel user : listUser) {
            Object[] row = {
                user.getId(),
                user.getUserName() != null ? user.getUserName() : "",
                user.getGender() != null ? user.getGender() : "",
                user.getPhone() != 0 ? String.valueOf(user.getPhone()) : "",
                user.getImage() != null ? user.getImage() : "",
                user.getEmail() != null ? user.getEmail() : "",
                user.getOption() != null ? user.getOption() : ""
            };
            table.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField Confirm;
    private javax.swing.JButton CreateButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JButton GetList;
    private javax.swing.JTextField ImageField;
    private javax.swing.JTable TableListUser;
    private javax.swing.JButton addRegister;
    private javax.swing.JTextField emailField;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField phoneField;
    private javax.swing.JTextField userNameField;
    // End of variables declaration//GEN-END:variables
}
